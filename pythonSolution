# https://www.youtube.com/watch?v=MEaQc1gslZg
# Reverse Linked List 
def reverseLinkedList(head):
  prev = None
  while head:
    next_node = head.next
    head.next = prev
    prev = head
    head = next_node
    return prev



class treeNode(object):
  """ Defination of Binary Tree Node """
  def __init__(self, x):
    self.val = x
    self.right = None
    self.left  = 
    """
    root:  Tree NOde
    rtype: int
    """
  def findMaxRoot(self, root):
    # initialize condition
    if root == none:
      return 0

    else:
      # get branches of tree
      left_tree = self.findMaxRoot(root.left)
      right_tree = self.findMaxRoot(right.left)
      # return max of the solution recursively
      return max(left_tree, right_tree) + 1
      
      
      
     


# 101. Symmetric Tree
# Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
class Solution:
    def isSymmetric(self, root):
      if root is None:
        return True
      else:
        return self.validateSymtry(root.left, root.right)

    def validateSymtry(self, left, right):
        
        if left is None and right is None:
            return True
        
        if left is None or right is None:
            return False
        
        if left.val == right.val:
            outPair = self.validateSymtry(left.left, right.right)
            inPair  = self.validateSymtry(left.right, right.left)
            return outPair and inPair


# Given an integer array nums, return 
# all the triplets [nums[i], nums[j], nums[k]]
#  such that i != j, i != k, and j != k,
#  and nums[i] + nums[j] + nums[k] == 0.
# https://www.youtube.com/watch?v=jzZsG8n2R9A

def soln_threesum(nums):
  # initialize the basics
  res = []
  nums.sort()

  # Initiate CPR, Set conditions
  for i, a in enumerate(nums):
    # first value condition
    if i > 0 and a == nums[i-1]:
      continue
    # move to 2sum technique for remaining
    # intiate CPR for 2 Sum
    l,r = i+1, len(nums)-1
    while l < r:
      threeSum = a + nums[l] + nums[r]
      if threeSum > 0:
        r -= 1
      elif threeSum < 0:
        l += 1
      else:
        res.append([a , nums[l], nums[r]])
        # continue to update the entire 3Sum index for L
        l += 1
        while nums[l] == nums[l-1] and  l < r:
          l+=1
  return res


# https://www.youtube.com/watch?v=5D9OrHsw3M0
# Rotate Array | LeetCode 189 | Python

def reverse(self, nums, l, r):
  # intiatpoe inters
  while l < r:
    # reverse indicating l and r
    nums[l], nums[r] = nums[r],nums[l]
    l += 1
    r -= 1
def rotate(nums, k):
  n = len(nums)
  k %= n
  self.reverse(nums, 0, n-k-1)
  self.reverse(nums, n-k, n-1)
  self.reverse(nums, 0, n-1)

# Rotate Image
# www.youtube.com/watch?v=fMSJSS7eO1w&t=12s

def rotate_image(matrix): 
  
  """
  Rotate Image
  """
  
  l, r = 0, len(matrix -1)
  # Track index of the matrix
  
  while l < r :
    for i in range(r - 1):
      top, btm = l, r
      topLeft = matrix[top][l + i]
      matrix[top][l + i] = matrix[btm - i][l]
      matrix[btm - i][l] = matrix[btm][r - i]
      matrix[btm][r - i] = matrix[top + i][r]
      matrix[top + i][r] = topLeft
    r-=1
    l+=1

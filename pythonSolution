# https://www.youtube.com/watch?v=MEaQc1gslZg
# Reverse Linked List 
def reverseLinkedList(head):
  prev = None
  while head:
    next_node = head.next
    head.next = prev
    prev = head
    head = next_node
    return prev



class treeNode(object):
  """ Defination of Binary Tree Node """
  def __init__(self, x):
    self.val = x
    self.right = None
    self.left  = 
    """
    root:  Tree NOde
    rtype: int
    """
  def findMaxRoot(self, root):
    # initialize condition
    if root == none:
      return 0

    else:
      # get branches of tree
      left_tree = self.findMaxRoot(root.left)
      right_tree = self.findMaxRoot(right.left)
      # return max of the solution recursively
      return max(left_tree, right_tree) + 1


# 101. Symmetric Tree
# Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
class Solution:
    def isSymmetric(self, root):
      if root is None:
        return True
      else:
        return self.validateSymtry(root.left, root.right)

    def validateSymtry(self, left, right):
        
        if left is None and right is None:
            return True
        
        if left is None or right is None:
            return False
        
        if left.val == right.val:
            outPair = self.validateSymtry(left.left, right.right)
            inPair  = self.validateSymtry(left.right, right.left)
            return outPair and inPair
